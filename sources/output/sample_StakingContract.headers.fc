;;
;; Header files for StakingContract
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_int_cell
(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline;

;; __tact_dict_get_int_cell
cell __tact_dict_get_int_cell(cell d, int kl, int k) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; $StakeNFT$_load
(slice, ((slice, int, int, int))) $StakeNFT$_load(slice sc_0) inline;

;; $ClaimNFT$_load
(slice, ((int))) $ClaimNFT$_load(slice sc_0) inline;

;; $Info$_store
builder $Info$_store(builder build_0, (slice, int, int) v) inline;

;; $Info$_store_cell
cell $Info$_store_cell((slice, int, int) v) inline;

;; $Info$_load
(slice, ((slice, int, int))) $Info$_load(slice sc_0) inline;

;; $Info$_as_optional
tuple $Info$_as_optional((slice, int, int) v) inline;

;; $Info$_load_opt
tuple $Info$_load_opt(cell cl) inline;

;; $StakingContract$_store
builder $StakingContract$_store(builder build_0, (int, int, int, slice, cell) v) inline;

;; $StakingContract$_load
(slice, ((int, int, int, slice, cell))) $StakingContract$_load(slice sc_0) inline;

;; $Info$_not_null
((slice, int, int)) $Info$_not_null(tuple v) inline;

;; $Info$_to_external
(slice, int, int) $Info$_to_external(((slice, int, int)) v) inline;

;; $StakeData$_to_external
(int) $StakeData$_to_external(((int)) v) inline;

;; $StakingContract$init$_load
(slice, ((slice))) $StakingContract$init$_load(slice sc_0) inline;

;; $StakingContract$_contract_init
(int, int, int, slice, cell) $StakingContract$_contract_init(slice $_nft) impure inline_ref;

;; $StakingContract$_contract_load
(int, int, int, slice, cell) $StakingContract$_contract_load() impure inline_ref;

;; $StakingContract$_contract_store
() $StakingContract$_contract_store((int, int, int, slice, cell) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Info$_constructor_sender_weight_unlock_time
((slice, int, int)) $Info$_constructor_sender_weight_unlock_time(slice sender, int weight, int unlock_time) inline;

;; $StakingContract$_fun_stake
((int, int, int, slice, cell), ()) $StakingContract$_fun_stake((int, int, int, slice, cell) $self, int $_nftId, slice $_sender, int $_duration, int $_level) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode(slice to, int value, int mode) inline;

;; $StakingContract$_fun_claimable
((int, int, int, slice, cell), int) $StakingContract$_fun_claimable((int, int, int, slice, cell) $self, int $nft_id) impure inline_ref;

;; $StakingContract$_fun_claim
((int, int, int, slice, cell), ()) $StakingContract$_fun_claim((int, int, int, slice, cell) $self, int $_nftId) impure inline_ref;

;; $StakeData$_constructor_totalWeight
((int)) $StakeData$_constructor_totalWeight(int totalWeight) inline;

;; $StakingContract$_fun_stake_data
((int, int, int, slice, cell), (int)) $StakingContract$_fun_stake_data((int, int, int, slice, cell) $self) impure inline_ref;

;; $StakingContract$_fun_get_user_list
((int, int, int, slice, cell), (slice, int, int)) $StakingContract$_fun_get_user_list((int, int, int, slice, cell) $self, int $_nftID) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_bounce_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline;
