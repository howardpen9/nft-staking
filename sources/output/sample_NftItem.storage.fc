;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice to, int value, int mode, cell body) inline {
    return (true, to, value, mode, body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_mode_value_body(slice to, int mode, int value, cell body) inline {
    return (true, to, value, mode, body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_code_data_body(slice to, int value, int mode, cell code, cell data, cell body) inline {
    return (true, to, value, mode, body, code, data);
}

;;
;; Type: Stake
;; Header: 0xe6b01d1b
;; TLB: stake#e6b01d1b duration:uint256 = Stake
;;

(slice, ((int))) $Stake$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3870301467);
    var v'duration = sc_0~load_uint(256);
    return (sc_0, (v'duration));
}

;;
;; Type: Transfer
;; Header: 0x5fcc3d14
;; TLB: transfer#5fcc3d14 query_id:uint64 new_owner:address response_destination:address custom_payload:Maybe ^cell forward_amount:coins forward_payload:remainder<slice> = Transfer
;;

(slice, ((int, slice, slice, cell, int, slice))) $Transfer$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 1607220500);
    var v'query_id = sc_0~load_uint(64);
    var v'new_owner = sc_0~__tact_load_address();
    var v'response_destination = sc_0~__tact_load_address();
    var v'custom_payload = sc_0~load_int(1) ? sc_0~load_ref() : null();
    var v'forward_amount = sc_0~load_coins();
    var v'forward_payload = sc_0;
    return (sc_0, (v'query_id, v'new_owner, v'response_destination, v'custom_payload, v'forward_amount, v'forward_payload));
}

;;
;; Type: OwnershipAssigned
;; Header: 0x05138d91
;; TLB: ownership_assigned#05138d91 query_id:uint64 prev_owner:address forward_payload:remainder<slice> = OwnershipAssigned
;;

builder $OwnershipAssigned$_store(builder build_0, (int, slice, slice) v) inline {
    var (v'query_id, v'prev_owner, v'forward_payload) = v;
    build_0 = store_uint(build_0, 85167505, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = __tact_store_address(build_0, v'prev_owner);
    build_0 = build_0.store_slice(v'forward_payload);
    return build_0;
}

cell $OwnershipAssigned$_store_cell((int, slice, slice) v) inline {
    return $OwnershipAssigned$_store(begin_cell(), v).end_cell();
}

((int, slice, slice)) $OwnershipAssigned$_constructor_query_id_prev_owner_forward_payload(int query_id, slice prev_owner, slice forward_payload) inline {
    return (query_id, prev_owner, forward_payload);
}

;;
;; Type: Excesses
;; Header: 0xd53276db
;; TLB: excesses#d53276db query_id:uint64 = Excesses
;;

builder $Excesses$_store(builder build_0, (int) v) inline {
    var (v'query_id) = v;
    build_0 = store_uint(build_0, 3576854235, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    return build_0;
}

cell $Excesses$_store_cell((int) v) inline {
    return $Excesses$_store(begin_cell(), v).end_cell();
}

((int)) $Excesses$_constructor_query_id(int query_id) inline {
    return (query_id);
}

;;
;; Type: GetStaticData
;; Header: 0x2fcb26a2
;; TLB: get_static_data#2fcb26a2 query_id:uint64 = GetStaticData
;;

(slice, ((int))) $GetStaticData$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 801842850);
    var v'query_id = sc_0~load_uint(64);
    return (sc_0, (v'query_id));
}

;;
;; Type: ReportStaticData
;; Header: 0x8b771735
;; TLB: report_static_data#8b771735 query_id:uint64 index_id:int257 collection:address = ReportStaticData
;;

builder $ReportStaticData$_store(builder build_0, (int, int, slice) v) inline {
    var (v'query_id, v'index_id, v'collection) = v;
    build_0 = store_uint(build_0, 2339837749, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_int(v'index_id, 257);
    build_0 = __tact_store_address(build_0, v'collection);
    return build_0;
}

cell $ReportStaticData$_store_cell((int, int, slice) v) inline {
    return $ReportStaticData$_store(begin_cell(), v).end_cell();
}

((int, int, slice)) $ReportStaticData$_constructor_query_id_index_id_collection(int query_id, int index_id, slice collection) inline {
    return (query_id, index_id, collection);
}

;;
;; Type: GetNftData
;; TLB: _ is_initialized:bool index:int257 collection_address:address owner_address:address individual_content:^cell level:int257 = GetNftData
;;

(int, int, slice, slice, cell, int) $GetNftData$_to_external(((int, int, slice, slice, cell, int)) v) inline {
    var (v'is_initialized, v'index, v'collection_address, v'owner_address, v'individual_content, v'level) = v; 
    return (v'is_initialized, v'index, v'collection_address, v'owner_address, v'individual_content, v'level);
}

((int, int, slice, slice, cell, int)) $GetNftData$_constructor_is_initialized_index_collection_address_owner_address_individual_content_level(int is_initialized, int index, slice collection_address, slice owner_address, cell individual_content, int level) inline {
    return (is_initialized, index, collection_address, owner_address, individual_content, level);
}

;;
;; Type: StakeNFT
;; Header: 0x847316e3
;; TLB: stake_nft#847316e3 sender_nft_item_address:address nftId:uint32 duration:uint256 level:int257 = StakeNFT
;;

builder $StakeNFT$_store(builder build_0, (slice, int, int, int) v) inline {
    var (v'sender_nft_item_address, v'nftId, v'duration, v'level) = v;
    build_0 = store_uint(build_0, 2222135011, 32);
    build_0 = __tact_store_address(build_0, v'sender_nft_item_address);
    build_0 = build_0.store_uint(v'nftId, 32);
    build_0 = build_0.store_uint(v'duration, 256);
    build_0 = build_0.store_int(v'level, 257);
    return build_0;
}

cell $StakeNFT$_store_cell((slice, int, int, int) v) inline {
    return $StakeNFT$_store(begin_cell(), v).end_cell();
}

((slice, int, int, int)) $StakeNFT$_constructor_sender_nft_item_address_nftId_duration_level(slice sender_nft_item_address, int nftId, int duration, int level) inline {
    return (sender_nft_item_address, nftId, duration, level);
}

;;
;; Type: ClaimNFT
;; Header: 0x36662895
;; TLB: claim_nft#36662895 nftId:uint32 = ClaimNFT
;;

builder $ClaimNFT$_store(builder build_0, (int) v) inline {
    var (v'nftId) = v;
    build_0 = store_uint(build_0, 912664725, 32);
    build_0 = build_0.store_uint(v'nftId, 32);
    return build_0;
}

cell $ClaimNFT$_store_cell((int) v) inline {
    return $ClaimNFT$_store(begin_cell(), v).end_cell();
}

((int)) $ClaimNFT$_constructor_nftId(int nftId) inline {
    return (nftId);
}

;;
;; Type: NftItem
;;

builder $NftItem$_store(builder build_0, (slice, int, slice, cell, int, int, int) v) inline {
    var (v'collection_address, v'item_index, v'owner, v'individual_content, v'is_initialized, v'level, v'is_staking) = v;
    build_0 = __tact_store_address(build_0, v'collection_address);
    build_0 = build_0.store_int(v'item_index, 257);
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_ref(v'individual_content);
    build_0 = build_0.store_int(v'is_initialized, 1);
    build_0 = build_0.store_uint(v'level, 16);
    build_0 = build_0.store_int(v'is_staking, 1);
    return build_0;
}

(slice, ((slice, int, slice, cell, int, int, int))) $NftItem$_load(slice sc_0) inline {
    var v'collection_address = sc_0~__tact_load_address();
    var v'item_index = sc_0~load_int(257);
    var v'owner = sc_0~__tact_load_address();
    var v'individual_content = sc_0~load_ref();
    var v'is_initialized = sc_0~load_int(1);
    var v'level = sc_0~load_uint(16);
    var v'is_staking = sc_0~load_int(1);
    return (sc_0, (v'collection_address, v'item_index, v'owner, v'individual_content, v'is_initialized, v'level, v'is_staking));
}

(slice, ((slice, int, slice, cell))) $NftItem$init$_load(slice sc_0) inline {
    var v'collection_address = sc_0~__tact_load_address();
    var v'item_index = sc_0~load_int(257);
    var v'owner = sc_0~__tact_load_address();
    var v'individual_content = sc_0~load_ref();
    return (sc_0, (v'collection_address, v'item_index, v'owner, v'individual_content));
}

(slice, int, slice, cell, int, int, int) $NftItem$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$NftItem$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice collection_address, int item_index, slice owner, cell individual_content) = $sc~$NftItem$init$_load();
        $sc.end_parse();
        return $NftItem$_contract_init(collection_address, item_index, owner, individual_content);
    }
}

() $NftItem$_contract_store((slice, int, slice, cell, int, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $NftItem$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Type: StakingContract
;;

builder $StakingContract$init$_store(builder build_0, (slice) v) inline {
    var (v'_nft) = v;
    build_0 = __tact_store_address(build_0, v'_nft);
    return build_0;
}

(cell, cell) $StakingContract$_init_child(cell sys', slice $_nft) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: StakingContract
    cell mine = __tact_dict_get_code(source, 5580);
    contracts = __tact_dict_set_code(contracts, 5580, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $StakingContract$init$_store(b, ($_nft));
    return (mine, b.end_cell());
}